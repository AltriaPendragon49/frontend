import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/cornerstone-math/dist/cornerstoneMath.min.js
var require_cornerstoneMath_min = __commonJS({
  "node_modules/cornerstone-math/dist/cornerstoneMath.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define("cornerstone-math", [], e) : "object" == typeof exports ? exports["cornerstone-math"] = e() : t.cornerstoneMath = e();
    }(window, function() {
      return function(t) {
        var e = {};
        function n(i) {
          if (e[i]) return e[i].exports;
          var r = e[i] = { i, l: false, exports: {} };
          return t[i].call(r.exports, r, r.exports, n), r.l = true, r.exports;
        }
        return n.m = t, n.c = e, n.d = function(t2, e2, i) {
          n.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: i });
        }, n.r = function(t2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
        }, n.t = function(t2, e2) {
          if (1 & e2 && (t2 = n(t2)), 8 & e2) return t2;
          if (4 & e2 && "object" == typeof t2 && t2 && t2.__esModule) return t2;
          var i = /* @__PURE__ */ Object.create(null);
          if (n.r(i), Object.defineProperty(i, "default", { enumerable: true, value: t2 }), 2 & e2 && "string" != typeof t2) for (var r in t2) n.d(i, r, (function(e3) {
            return t2[e3];
          }).bind(null, r));
          return i;
        }, n.n = function(t2) {
          var e2 = t2 && t2.__esModule ? function() {
            return t2.default;
          } : function() {
            return t2;
          };
          return n.d(e2, "a", e2), e2;
        }, n.o = function(t2, e2) {
          return Object.prototype.hasOwnProperty.call(t2, e2);
        }, n.p = "", n(n.s = 4);
      }([function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = /* @__PURE__ */ function() {
          function t2(t3, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t3, i2.key, i2);
            }
          }
          return function(e2, n2, i2) {
            return n2 && t2(e2.prototype, n2), i2 && t2(e2, i2), e2;
          };
        }(), r = function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        }(n(2)), o = n(1);
        var s = function() {
          function t2(e2, n2, i2) {
            !function(t3, e3) {
              if (!(t3 instanceof e3)) throw new TypeError("Cannot call a class as a function");
            }(this, t2), this.x = e2 || 0, this.y = n2 || 0, this.z = i2 || 0;
          }
          return i(t2, [{ key: "set", value: function(t3, e2, n2) {
            return this.x = t3, this.y = e2, this.z = n2, this;
          } }, { key: "setX", value: function(t3) {
            return this.x = t3, this;
          } }, { key: "setY", value: function(t3) {
            return this.y = t3, this;
          } }, { key: "setZ", value: function(t3) {
            return this.z = t3, this;
          } }, { key: "setComponent", value: function(t3, e2) {
            switch (t3) {
              case 0:
                this.x = e2;
                break;
              case 1:
                this.y = e2;
                break;
              case 2:
                this.z = e2;
                break;
              default:
                throw new Error("index is out of range: " + t3);
            }
          } }, { key: "getComponent", value: function(t3) {
            switch (t3) {
              case 0:
                return this.x;
              case 1:
                return this.y;
              case 2:
                return this.z;
              default:
                throw new Error("index is out of range: " + t3);
            }
          } }, { key: "copy", value: function(t3) {
            return this.x = t3.x, this.y = t3.y, this.z = t3.z, this;
          } }, { key: "add", value: function(t3, e2) {
            return void 0 !== e2 ? (console.warn("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t3, e2)) : (this.x += t3.x, this.y += t3.y, this.z += t3.z, this);
          } }, { key: "addScalar", value: function(t3) {
            return this.x += t3, this.y += t3, this.z += t3, this;
          } }, { key: "addVectors", value: function(t3, e2) {
            return this.x = t3.x + e2.x, this.y = t3.y + e2.y, this.z = t3.z + e2.z, this;
          } }, { key: "sub", value: function(t3, e2) {
            return void 0 !== e2 ? (console.warn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t3, e2)) : (this.x -= t3.x, this.y -= t3.y, this.z -= t3.z, this);
          } }, { key: "subVectors", value: function(t3, e2) {
            return this.x = t3.x - e2.x, this.y = t3.y - e2.y, this.z = t3.z - e2.z, this;
          } }, { key: "multiply", value: function(t3, e2) {
            return void 0 !== e2 ? (console.warn("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(t3, e2)) : (this.x *= t3.x, this.y *= t3.y, this.z *= t3.z, this);
          } }, { key: "multiplyScalar", value: function(t3) {
            return this.x *= t3, this.y *= t3, this.z *= t3, this;
          } }, { key: "multiplyVectors", value: function(t3, e2) {
            return this.x = t3.x * e2.x, this.y = t3.y * e2.y, this.z = t3.z * e2.z, this;
          } }, { key: "applyMatrix3", value: function(t3) {
            var e2 = this.x, n2 = this.y, i2 = this.z, r2 = t3.elements;
            return this.x = r2[0] * e2 + r2[3] * n2 + r2[6] * i2, this.y = r2[1] * e2 + r2[4] * n2 + r2[7] * i2, this.z = r2[2] * e2 + r2[5] * n2 + r2[8] * i2, this;
          } }, { key: "applyMatrix4", value: function(t3) {
            var e2 = this.x, n2 = this.y, i2 = this.z, r2 = t3.elements;
            return this.x = r2[0] * e2 + r2[4] * n2 + r2[8] * i2 + r2[12], this.y = r2[1] * e2 + r2[5] * n2 + r2[9] * i2 + r2[13], this.z = r2[2] * e2 + r2[6] * n2 + r2[10] * i2 + r2[14], this;
          } }, { key: "applyProjection", value: function(t3) {
            var e2 = this.x, n2 = this.y, i2 = this.z, r2 = t3.elements, o2 = 1 / (r2[3] * e2 + r2[7] * n2 + r2[11] * i2 + r2[15]);
            return this.x = (r2[0] * e2 + r2[4] * n2 + r2[8] * i2 + r2[12]) * o2, this.y = (r2[1] * e2 + r2[5] * n2 + r2[9] * i2 + r2[13]) * o2, this.z = (r2[2] * e2 + r2[6] * n2 + r2[10] * i2 + r2[14]) * o2, this;
          } }, { key: "applyQuaternion", value: function(t3) {
            var e2 = this.x, n2 = this.y, i2 = this.z, r2 = t3.x, o2 = t3.y, s2 = t3.z, a = t3.w, u = a * e2 + o2 * i2 - s2 * n2, h = a * n2 + s2 * e2 - r2 * i2, l = a * i2 + r2 * n2 - o2 * e2, c = -r2 * e2 - o2 * n2 - s2 * i2;
            return this.x = u * a + c * -r2 + h * -s2 - l * -o2, this.y = h * a + c * -o2 + l * -r2 - u * -s2, this.z = l * a + c * -s2 + u * -o2 - h * -r2, this;
          } }, { key: "transformDirection", value: function(t3) {
            var e2 = this.x, n2 = this.y, i2 = this.z, r2 = t3.elements;
            return this.x = r2[0] * e2 + r2[4] * n2 + r2[8] * i2, this.y = r2[1] * e2 + r2[5] * n2 + r2[9] * i2, this.z = r2[2] * e2 + r2[6] * n2 + r2[10] * i2, this.normalize(), this;
          } }, { key: "divide", value: function(t3) {
            return this.x /= t3.x, this.y /= t3.y, this.z /= t3.z, this;
          } }, { key: "divideScalar", value: function(t3) {
            if (0 !== t3) {
              var e2 = 1 / t3;
              this.x *= e2, this.y *= e2, this.z *= e2;
            } else this.x = 0, this.y = 0, this.z = 0;
            return this;
          } }, { key: "min", value: function(t3) {
            return this.x > t3.x && (this.x = t3.x), this.y > t3.y && (this.y = t3.y), this.z > t3.z && (this.z = t3.z), this;
          } }, { key: "max", value: function(t3) {
            return this.x < t3.x && (this.x = t3.x), this.y < t3.y && (this.y = t3.y), this.z < t3.z && (this.z = t3.z), this;
          } }, { key: "clamp", value: function(t3, e2) {
            return this.x < t3.x ? this.x = t3.x : this.x > e2.x && (this.x = e2.x), this.y < t3.y ? this.y = t3.y : this.y > e2.y && (this.y = e2.y), this.z < t3.z ? this.z = t3.z : this.z > e2.z && (this.z = e2.z), this;
          } }, { key: "floor", value: function() {
            return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
          } }, { key: "ceil", value: function() {
            return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
          } }, { key: "round", value: function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
          } }, { key: "roundToZero", value: function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
          } }, { key: "negate", value: function() {
            return this.multiplyScalar(-1);
          } }, { key: "dot", value: function(t3) {
            return this.x * t3.x + this.y * t3.y + this.z * t3.z;
          } }, { key: "lengthSq", value: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z;
          } }, { key: "length", value: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
          } }, { key: "lengthManhattan", value: function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
          } }, { key: "normalize", value: function() {
            return this.divideScalar(this.length());
          } }, { key: "setLength", value: function(t3) {
            var e2 = this.length();
            return 0 !== e2 && t3 !== e2 && this.multiplyScalar(t3 / e2), this;
          } }, { key: "lerp", value: function(t3, e2) {
            return this.x += (t3.x - this.x) * e2, this.y += (t3.y - this.y) * e2, this.z += (t3.z - this.z) * e2, this;
          } }, { key: "cross", value: function(t3, e2) {
            if (void 0 !== e2) return console.warn("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(t3, e2);
            var n2 = this.x, i2 = this.y, r2 = this.z;
            return this.x = i2 * t3.z - r2 * t3.y, this.y = r2 * t3.x - n2 * t3.z, this.z = n2 * t3.y - i2 * t3.x, this;
          } }, { key: "crossVectors", value: function(t3, e2) {
            var n2 = t3.x, i2 = t3.y, r2 = t3.z, o2 = e2.x, s2 = e2.y, a = e2.z;
            return this.x = i2 * a - r2 * s2, this.y = r2 * o2 - n2 * a, this.z = n2 * s2 - i2 * o2, this;
          } }, { key: "angleTo", value: function(t3) {
            var e2 = this.dot(t3) / (this.length() * t3.length());
            return Math.acos((0, o.clamp)(e2, -1, 1));
          } }, { key: "distanceTo", value: function(t3) {
            return Math.sqrt(this.distanceToSquared(t3));
          } }, { key: "distanceToSquared", value: function(t3) {
            var e2 = this.x - t3.x, n2 = this.y - t3.y, i2 = this.z - t3.z;
            return e2 * e2 + n2 * n2 + i2 * i2;
          } }, { key: "setFromMatrixPosition", value: function(t3) {
            return this.x = t3.elements[12], this.y = t3.elements[13], this.z = t3.elements[14], this;
          } }, { key: "setFromMatrixScale", value: function(t3) {
            var e2 = this.set(t3.elements[0], t3.elements[1], t3.elements[2]).length(), n2 = this.set(t3.elements[4], t3.elements[5], t3.elements[6]).length(), i2 = this.set(t3.elements[8], t3.elements[9], t3.elements[10]).length();
            return this.x = e2, this.y = n2, this.z = i2, this;
          } }, { key: "setFromMatrixColumn", value: function(t3, e2) {
            var n2 = 4 * t3, i2 = e2.elements;
            return this.x = i2[n2], this.y = i2[n2 + 1], this.z = i2[n2 + 2], this;
          } }, { key: "equals", value: function(t3) {
            return t3.x === this.x && t3.y === this.y && t3.z === this.z;
          } }, { key: "fromArray", value: function(t3) {
            return this.x = t3[0], this.y = t3[1], this.z = t3[2], this;
          } }, { key: "toArray", value: function() {
            return [this.x, this.y, this.z];
          } }, { key: "clone", value: function() {
            return new t2(this.x, this.y, this.z);
          } }]), t2;
        }();
        s.prototype.projectOnVector = /* @__PURE__ */ function() {
          var t2 = void 0, e2 = void 0;
          return function(n2) {
            return void 0 === t2 && (t2 = new s()), t2.copy(n2).normalize(), e2 = this.dot(t2), this.copy(t2).multiplyScalar(e2);
          };
        }(), s.prototype.projectOnPlane = /* @__PURE__ */ function() {
          var t2 = void 0;
          return function(e2) {
            return void 0 === t2 && (t2 = new s()), t2.copy(this).projectOnVector(e2), this.sub(t2);
          };
        }(), s.prototype.reflect = /* @__PURE__ */ function() {
          var t2 = void 0;
          return function(e2) {
            return void 0 === t2 && (t2 = new s()), this.sub(t2.copy(e2).multiplyScalar(2 * this.dot(e2)));
          };
        }(), s.prototype.clampScalar = /* @__PURE__ */ function() {
          var t2 = void 0, e2 = void 0;
          return function(n2, i2) {
            return void 0 === t2 && (t2 = new s(), e2 = new s()), t2.set(n2, n2, n2), e2.set(i2, i2, i2), this.clamp(t2, e2);
          };
        }(), s.prototype.applyAxisAngle = /* @__PURE__ */ function() {
          var t2 = void 0;
          return function(e2, n2) {
            return void 0 === t2 && (t2 = new r.default()), this.applyQuaternion(t2.setFromAxisAngle(e2.normalize(), n2)), this;
          };
        }(), e.default = s;
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = 1e-4;
        e.clamp = function(t2, e2, n2) {
          return t2 < e2 ? e2 : t2 > n2 ? n2 : t2;
        }, e.degToRad = function(t2) {
          return t2 * (Math.PI / 180);
        }, e.approximatelyEquals = function(t2, e2, n2) {
          var r = n2 || i;
          return Math.abs(t2 - e2) <= r * Math.max(1, Math.abs(t2), Math.abs(e2));
        }, e.radToDeg = function(t2) {
          return t2 * (180 / Math.PI);
        }, e.sign = function(t2) {
          return "number" == typeof t2 ? t2 ? t2 < 0 ? -1 : 1 : t2 == t2 ? 0 : NaN : NaN;
        };
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = /* @__PURE__ */ function() {
          function t2(t3, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t3, i2.key, i2);
            }
          }
          return function(e2, n2, i2) {
            return n2 && t2(e2.prototype, n2), i2 && t2(e2, i2), e2;
          };
        }();
        var r = function() {
          function t2(e2, n2, i2, r2) {
            !function(t3, e3) {
              if (!(t3 instanceof e3)) throw new TypeError("Cannot call a class as a function");
            }(this, t2), this.x = e2 || 0, this.y = n2 || 0, this.z = i2 || 0, this.w = void 0 !== r2 ? r2 : 1;
          }
          return i(t2, [{ key: "setFromAxisAngle", value: function(t3, e2) {
            var n2 = e2 / 2, i2 = Math.sin(n2);
            return this.x = t3.x * i2, this.y = t3.y * i2, this.z = t3.z * i2, this.w = Math.cos(n2), this;
          } }, { key: "multiplyQuaternions", value: function(t3, e2) {
            var n2 = t3.x, i2 = t3.y, r2 = t3.z, o = t3.w, s = e2.x, a = e2.y, u = e2.z, h = e2.w;
            return this.x = n2 * h + o * s + i2 * u - r2 * a, this.y = i2 * h + o * a + r2 * s - n2 * u, this.z = r2 * h + o * u + n2 * a - i2 * s, this.w = o * h - n2 * s - i2 * a - r2 * u, this;
          } }, { key: "setFromRotationMatrix", value: function(t3) {
            var e2 = t3.elements, n2 = e2[0], i2 = e2[4], r2 = e2[8], o = e2[1], s = e2[5], a = e2[9], u = e2[2], h = e2[6], l = e2[10], c = n2 + s + l, y = void 0;
            return c > 0 ? (y = 0.5 / Math.sqrt(c + 1), this.w = 0.25 / y, this.x = (h - a) * y, this.y = (r2 - u) * y, this.z = (o - i2) * y) : n2 > s && n2 > l ? (y = 2 * Math.sqrt(1 + n2 - s - l), this.w = (h - a) / y, this.x = 0.25 * y, this.y = (i2 + o) / y, this.z = (r2 + u) / y) : s > l ? (y = 2 * Math.sqrt(1 + s - n2 - l), this.w = (r2 - u) / y, this.x = (i2 + o) / y, this.y = 0.25 * y, this.z = (a + h) / y) : (y = 2 * Math.sqrt(1 + l - n2 - s), this.w = (o - i2) / y, this.x = (r2 + u) / y, this.y = (a + h) / y, this.z = 0.25 * y), this;
          } }]), t2;
        }();
        e.default = r;
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = n(1);
        function r(t2) {
          return t2 * t2;
        }
        function o(t2, e2) {
          return r(t2.x - e2.x) + r(t2.y - e2.y);
        }
        var s = { distanceToPoint: function(t2, e2) {
          return Math.sqrt(function(t3, e3) {
            var n2 = o(t3.start, t3.end);
            if (0 === n2) return o(e3, t3.start);
            var i2 = ((e3.x - t3.start.x) * (t3.end.x - t3.start.x) + (e3.y - t3.start.y) * (t3.end.y - t3.start.y)) / n2;
            return o(e3, i2 < 0 ? t3.start : i2 > 1 ? t3.end : { x: t3.start.x + i2 * (t3.end.x - t3.start.x), y: t3.start.y + i2 * (t3.end.y - t3.start.y) });
          }(t2, e2));
        }, intersectLine: function(t2, e2) {
          var n2, r2, o2, s2, a, u, h, l, c, y, f, d = {}, v = t2.start.x, p = t2.start.y, x = t2.end.x, m = t2.end.y, g = e2.start.x, b = e2.start.y, z = e2.end.x, k = e2.end.y, M = void 0;
          if (y = (n2 = m - p) * z + (o2 = v - x) * k + (a = x * p - v * m), (0 === (c = n2 * g + o2 * b + a) || 0 === y || (0, i.sign)(c) !== (0, i.sign)(y)) && (l = (r2 = k - b) * x + (s2 = g - z) * m + (u = z * b - g * k), 0 === (h = r2 * v + s2 * p + u) || 0 === l || (0, i.sign)(h) !== (0, i.sign)(l))) {
            f = n2 * s2 - r2 * o2, M = o2 * u - s2 * a;
            var w = parseFloat(M / f);
            M = r2 * a - n2 * u;
            var P = parseFloat(M / f);
            return d.x = w, d.y = P, d;
          }
        } };
        e.default = s;
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.Vector3 = e.rect = e.quaternion = e.point = e.Plane = e.Matrix4 = e.sign = e.radToDeg = e.degToRad = e.clamp = e.lineSegment = e.Line3 = void 0;
        var i = y(n(5)), r = y(n(3)), o = n(1), s = y(n(6)), a = y(n(7)), u = y(n(8)), h = y(n(2)), l = y(n(9)), c = y(n(0));
        function y(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        }
        var f = { Line3: i.default, lineSegment: r.default, clamp: o.clamp, degToRad: o.degToRad, radToDeg: o.radToDeg, sign: o.sign, Matrix4: s.default, Plane: a.default, point: u.default, quaternion: h.default, rect: l.default, Vector3: c.default };
        e.Line3 = i.default, e.lineSegment = r.default, e.clamp = o.clamp, e.degToRad = o.degToRad, e.radToDeg = o.radToDeg, e.sign = o.sign, e.Matrix4 = s.default, e.Plane = a.default, e.point = u.default, e.quaternion = h.default, e.rect = l.default, e.Vector3 = c.default, e.default = f;
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = /* @__PURE__ */ function() {
          function t2(t3, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t3, i2.key, i2);
            }
          }
          return function(e2, n2, i2) {
            return n2 && t2(e2.prototype, n2), i2 && t2(e2, i2), e2;
          };
        }(), r = function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        }(n(0)), o = n(1);
        var s = function() {
          function t2(e2, n2) {
            !function(t3, e3) {
              if (!(t3 instanceof e3)) throw new TypeError("Cannot call a class as a function");
            }(this, t2), this.start = void 0 !== e2 ? e2 : new r.default(), this.end = void 0 !== n2 ? n2 : new r.default();
          }
          return i(t2, [{ key: "set", value: function(t3, e2) {
            return this.start.copy(t3), this.end.copy(e2), this;
          } }, { key: "copy", value: function(t3) {
            return this.start.copy(t3.start), this.end.copy(t3.end), this;
          } }, { key: "center", value: function(t3) {
            return (t3 || new r.default()).addVectors(this.start, this.end).multiplyScalar(0.5);
          } }, { key: "delta", value: function(t3) {
            return (t3 || new r.default()).subVectors(this.end, this.start);
          } }, { key: "distanceSq", value: function() {
            return this.start.distanceToSquared(this.end);
          } }, { key: "distance", value: function() {
            return this.start.distanceTo(this.end);
          } }, { key: "at", value: function(t3, e2) {
            var n2 = e2 || new r.default();
            return this.delta(n2).multiplyScalar(t3).add(this.start);
          } }, { key: "closestPointToPointParameter", value: function(t3, e2) {
            var n2 = new r.default(), i2 = new r.default();
            n2.subVectors(t3, this.start), i2.subVectors(this.end, this.start);
            var s2 = i2.dot(i2), a = i2.dot(n2) / s2;
            return e2 && (a = (0, o.clamp)(a, 0, 1)), a;
          } }, { key: "closestPointToPoint", value: function(t3, e2, n2) {
            var i2 = this.closestPointToPointParameter(t3, e2), o2 = n2 || new r.default();
            return this.delta(o2).multiplyScalar(i2).add(this.start);
          } }, { key: "applyMatrix4", value: function(t3) {
            return this.start.applyMatrix4(t3), this.end.applyMatrix4(t3), this;
          } }, { key: "equals", value: function(t3) {
            return t3.start.equals(this.start) && t3.end.equals(this.end);
          } }, { key: "clone", value: function() {
            return new t2().copy(this);
          } }, { key: "intersectLine", value: function(t3) {
            var e2 = this.end.clone().sub(this.start), n2 = t3.end.clone().sub(t3.start), i2 = t3.start.clone().sub(this.start), r2 = e2.clone().cross(n2), s2 = i2.clone().cross(n2), a = i2.dot(r2) / (i2.lengthSq() * r2.lengthSq());
            if ((0, o.approximatelyEquals)(a, 0)) {
              var u = s2.dot(r2) / r2.lengthSq();
              if (!(u > 1 || isNaN(u))) {
                var h = this.start.clone().add(e2.clone().multiplyScalar(u));
                return h.clone().sub(t3.start).lengthSq() + h.clone().sub(t3.end).lengthSq() <= t3.distanceSq() ? h : void 0;
              }
            }
          } }]), t2;
        }();
        e.default = s;
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = /* @__PURE__ */ function() {
          function t2(t3, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t3, i2.key, i2);
            }
          }
          return function(e2, n2, i2) {
            return n2 && t2(e2.prototype, n2), i2 && t2(e2, i2), e2;
          };
        }(), r = function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        }(n(0));
        var o = function() {
          function t2(e2, n2, i2, r2, o2, s, a, u, h, l, c, y, f, d, v, p) {
            !function(t3, e3) {
              if (!(t3 instanceof e3)) throw new TypeError("Cannot call a class as a function");
            }(this, t2), this.elements = new Float32Array(16);
            var x = this.elements;
            x[0] = void 0 !== e2 ? e2 : 1, x[4] = n2 || 0, x[8] = i2 || 0, x[12] = r2 || 0, x[1] = o2 || 0, x[5] = void 0 !== s ? s : 1, x[9] = a || 0, x[13] = u || 0, x[2] = h || 0, x[6] = l || 0, x[10] = void 0 !== c ? c : 1, x[14] = y || 0, x[3] = f || 0, x[7] = d || 0, x[11] = v || 0, x[15] = void 0 !== p ? p : 1;
          }
          return i(t2, [{ key: "makeRotationFromQuaternion", value: function(t3) {
            var e2 = this.elements, n2 = t3.x, i2 = t3.y, r2 = t3.z, o2 = t3.w, s = n2 + n2, a = i2 + i2, u = r2 + r2, h = n2 * s, l = n2 * a, c = n2 * u, y = i2 * a, f = i2 * u, d = r2 * u, v = o2 * s, p = o2 * a, x = o2 * u;
            return e2[0] = 1 - (y + d), e2[4] = l - x, e2[8] = c + p, e2[1] = l + x, e2[5] = 1 - (h + d), e2[9] = f - v, e2[2] = c - p, e2[6] = f + v, e2[10] = 1 - (h + y), e2[3] = 0, e2[7] = 0, e2[11] = 0, e2[12] = 0, e2[13] = 0, e2[14] = 0, e2[15] = 1, this;
          } }, { key: "multiplyMatrices", value: function(t3, e2) {
            var n2 = t3.elements, i2 = e2.elements, r2 = this.elements, o2 = n2[0], s = n2[4], a = n2[8], u = n2[12], h = n2[1], l = n2[5], c = n2[9], y = n2[13], f = n2[2], d = n2[6], v = n2[10], p = n2[14], x = n2[3], m = n2[7], g = n2[11], b = n2[15], z = i2[0], k = i2[4], M = i2[8], w = i2[12], P = i2[1], R = i2[5], L = i2[9], T = i2[13], S = i2[2], _ = i2[6], q = i2[10], j = i2[14], V = i2[3], E = i2[7], O = i2[11], C = i2[15];
            return r2[0] = o2 * z + s * P + a * S + u * V, r2[4] = o2 * k + s * R + a * _ + u * E, r2[8] = o2 * M + s * L + a * q + u * O, r2[12] = o2 * w + s * T + a * j + u * C, r2[1] = h * z + l * P + c * S + y * V, r2[5] = h * k + l * R + c * _ + y * E, r2[9] = h * M + l * L + c * q + y * O, r2[13] = h * w + l * T + c * j + y * C, r2[2] = f * z + d * P + v * S + p * V, r2[6] = f * k + d * R + v * _ + p * E, r2[10] = f * M + d * L + v * q + p * O, r2[14] = f * w + d * T + v * j + p * C, r2[3] = x * z + m * P + g * S + b * V, r2[7] = x * k + m * R + g * _ + b * E, r2[11] = x * M + m * L + g * q + b * O, r2[15] = x * w + m * T + g * j + b * C, this;
          } }, { key: "multiply", value: function(t3, e2) {
            return void 0 !== e2 ? (console.warn("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(t3, e2)) : this.multiplyMatrices(this, t3);
          } }, { key: "getInverse", value: function(t3, e2) {
            var n2 = this.elements, i2 = t3.elements, r2 = i2[0], o2 = i2[4], s = i2[8], a = i2[12], u = i2[1], h = i2[5], l = i2[9], c = i2[13], y = i2[2], f = i2[6], d = i2[10], v = i2[14], p = i2[3], x = i2[7], m = i2[11], g = i2[15];
            n2[0] = l * v * x - c * d * x + c * f * m - h * v * m - l * f * g + h * d * g, n2[4] = a * d * x - s * v * x - a * f * m + o2 * v * m + s * f * g - o2 * d * g, n2[8] = s * c * x - a * l * x + a * h * m - o2 * c * m - s * h * g + o2 * l * g, n2[12] = a * l * f - s * c * f - a * h * d + o2 * c * d + s * h * v - o2 * l * v, n2[1] = c * d * p - l * v * p - c * y * m + u * v * m + l * y * g - u * d * g, n2[5] = s * v * p - a * d * p + a * y * m - r2 * v * m - s * y * g + r2 * d * g, n2[9] = a * l * p - s * c * p - a * u * m + r2 * c * m + s * u * g - r2 * l * g, n2[13] = s * c * y - a * l * y + a * u * d - r2 * c * d - s * u * v + r2 * l * v, n2[2] = h * v * p - c * f * p + c * y * x - u * v * x - h * y * g + u * f * g, n2[6] = a * f * p - o2 * v * p - a * y * x + r2 * v * x + o2 * y * g - r2 * f * g, n2[10] = o2 * c * p - a * h * p + a * u * x - r2 * c * x - o2 * u * g + r2 * h * g, n2[14] = a * h * y - o2 * c * y - a * u * f + r2 * c * f + o2 * u * v - r2 * h * v, n2[3] = l * f * p - h * d * p - l * y * x + u * d * x + h * y * m - u * f * m, n2[7] = o2 * d * p - s * f * p + s * y * x - r2 * d * x - o2 * y * m + r2 * f * m, n2[11] = s * h * p - o2 * l * p - s * u * x + r2 * l * x + o2 * u * m - r2 * h * m, n2[15] = o2 * l * y - s * h * y + s * u * f - r2 * l * f - o2 * u * d + r2 * h * d;
            var b = r2 * n2[0] + u * n2[4] + y * n2[8] + p * n2[12];
            if (0 === b) {
              var z = "Matrix4.getInverse(): can't invert matrix, determinant is 0";
              if (e2) throw new Error(z);
              return console.warn(z), this.identity(), this;
            }
            return this.multiplyScalar(1 / b), this;
          } }, { key: "applyToVector3Array", value: function() {
            var t3 = new r.default();
            return function(e2, n2, i2) {
              void 0 === n2 && (n2 = 0), void 0 === i2 && (i2 = e2.length);
              for (var r2 = 0, o2 = n2; r2 < i2; r2 += 3, o2 += 3) t3.x = e2[o2], t3.y = e2[o2 + 1], t3.z = e2[o2 + 2], t3.applyMatrix4(this), e2[o2] = t3.x, e2[o2 + 1] = t3.y, e2[o2 + 2] = t3.z;
              return e2;
            };
          } }, { key: "makeTranslation", value: function(t3, e2, n2) {
            return this.set(1, 0, 0, t3, 0, 1, 0, e2, 0, 0, 1, n2, 0, 0, 0, 1), this;
          } }, { key: "multiplyScalar", value: function(t3) {
            var e2 = this.elements;
            return e2[0] *= t3, e2[4] *= t3, e2[8] *= t3, e2[12] *= t3, e2[1] *= t3, e2[5] *= t3, e2[9] *= t3, e2[13] *= t3, e2[2] *= t3, e2[6] *= t3, e2[10] *= t3, e2[14] *= t3, e2[3] *= t3, e2[7] *= t3, e2[11] *= t3, e2[15] *= t3, this;
          } }, { key: "set", value: function(t3, e2, n2, i2, r2, o2, s, a, u, h, l, c, y, f, d, v) {
            var p = this.elements;
            return p[0] = t3, p[4] = e2, p[8] = n2, p[12] = i2, p[1] = r2, p[5] = o2, p[9] = s, p[13] = a, p[2] = u, p[6] = h, p[10] = l, p[14] = c, p[3] = y, p[7] = f, p[11] = d, p[15] = v, this;
          } }, { key: "makeScale", value: function(t3, e2, n2) {
            return this.set(t3, 0, 0, 0, 0, e2, 0, 0, 0, 0, n2, 0, 0, 0, 0, 1), this;
          } }]), t2;
        }();
        e.default = o;
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = /* @__PURE__ */ function() {
          function t2(t3, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t3, i2.key, i2);
            }
          }
          return function(e2, n2, i2) {
            return n2 && t2(e2.prototype, n2), i2 && t2(e2, i2), e2;
          };
        }(), r = function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        }(n(0));
        var o = function() {
          function t2(e2, n2) {
            !function(t3, e3) {
              if (!(t3 instanceof e3)) throw new TypeError("Cannot call a class as a function");
            }(this, t2), this.normal = void 0 !== e2 ? e2 : new r.default(1, 0, 0), this.constant = void 0 !== n2 ? n2 : 0;
          }
          return i(t2, [{ key: "set", value: function(t3, e2) {
            return this.normal.copy(t3), this.constant = e2, this;
          } }, { key: "setComponents", value: function(t3, e2, n2, i2) {
            return this.normal.set(t3, e2, n2), this.constant = i2, this;
          } }, { key: "setFromNormalAndCoplanarPoint", value: function(t3, e2) {
            return this.normal.copy(t3), this.constant = -e2.dot(this.normal), this;
          } }, { key: "copy", value: function(t3) {
            return this.normal.copy(t3.normal), this.constant = t3.constant, this;
          } }, { key: "normalize", value: function() {
            var t3 = 1 / this.normal.length();
            return this.normal.multiplyScalar(t3), this.constant *= t3, this;
          } }, { key: "negate", value: function() {
            return this.constant *= -1, this.normal.negate(), this;
          } }, { key: "distanceToPoint", value: function(t3) {
            return this.normal.dot(t3) + this.constant;
          } }, { key: "distanceToSphere", value: function(t3) {
            return this.distanceToPoint(t3.center) - t3.radius;
          } }, { key: "projectPoint", value: function(t3, e2) {
            return this.orthoPoint(t3, e2).sub(t3).negate();
          } }, { key: "orthoPoint", value: function(t3, e2) {
            var n2 = this.distanceToPoint(t3);
            return (e2 || new r.default()).copy(this.normal).multiplyScalar(n2);
          } }, { key: "isIntersectionLine", value: function(t3) {
            var e2 = this.distanceToPoint(t3.start), n2 = this.distanceToPoint(t3.end);
            return e2 < 0 && n2 > 0 || n2 < 0 && e2 > 0;
          } }, { key: "intersectPlane", value: function(t3) {
            var e2 = this.normal.clone().cross(t3.normal), n2 = { origin: new r.default(), direction: e2 };
            if (this.normal.clone().cross(t3.normal).length < 1e-10) return n2.direction = new r.default(), n2;
            var i2 = this.constant, o2 = t3.constant, s = this.normal.clone().dot(t3.normal), a = -(i2 - o2 * s) / (1 - s * s), u = -(o2 - i2 * s) / (1 - s * s);
            return n2.origin = this.normal.clone().multiplyScalar(a).add(t3.normal.clone().multiplyScalar(u)), n2;
          } }, { key: "coplanarPoint", value: function(t3) {
            return (t3 || new r.default()).copy(this.normal).multiplyScalar(-this.constant);
          } }, { key: "translate", value: function(t3) {
            return this.constant = this.constant - t3.dot(this.normal), this;
          } }, { key: "equals", value: function(t3) {
            return t3.normal.equals(this.normal) && t3.constant === this.constant;
          } }, { key: "clone", value: function() {
            return new t2().copy(this);
          } }]), t2;
        }();
        o.prototype.setFromCoplanarPoints = function() {
          var t2 = new r.default(), e2 = new r.default();
          return function(n2, i2, r2) {
            var o2 = t2.subVectors(r2, i2).cross(e2.subVectors(n2, i2)).normalize();
            return this.setFromNormalAndCoplanarPoint(o2, n2), this;
          };
        }(), o.prototype.intersectLine = function() {
          var t2 = new r.default();
          return function(e2, n2) {
            var i2 = n2 || new r.default(), o2 = e2.delta(t2), s = this.normal.dot(o2);
            if (0 === s) return 0 === this.distanceToPoint(e2.start) ? i2.copy(e2.start) : void 0;
            var a = -(e2.start.dot(this.normal) + this.constant) / s;
            return a < 0 || a > 1 ? void 0 : i2.copy(o2).multiplyScalar(a).add(e2.start);
          };
        }(), e.default = o;
      }, function(t, e, n) {
        "use strict";
        function i(t2, e2) {
          return { x: t2.x - e2.x, y: t2.y - e2.y };
        }
        function r(t2, e2) {
          return Math.sqrt(o(t2, e2));
        }
        function o(t2, e2) {
          var n2 = i(t2, e2);
          return n2.x * n2.x + n2.y * n2.y;
        }
        Object.defineProperty(e, "__esModule", { value: true });
        var s = { subtract: i, copy: function(t2) {
          return { x: t2.x, y: t2.y };
        }, pageToPoint: function(t2) {
          return { x: t2.pageX, y: t2.pageY };
        }, distance: r, distanceSquared: o, insideRect: function(t2, e2) {
          return !(t2.x < e2.left || t2.x > e2.left + e2.width || t2.y < e2.top || t2.y > e2.top + e2.height);
        }, findClosestPoint: function(t2, e2) {
          var n2 = [], i2 = void 0;
          return t2.forEach(function(t3, o2) {
            var s2 = r(t3, e2);
            n2.push(s2), i2 = 0 === o2 ? s2 : Math.min(s2, i2);
          }), t2[n2.indexOf(i2)];
        } };
        e.default = s;
      }, function(t, e, n) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var i = function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        }(n(3));
        function r(t2) {
          return { topLeft: { x: t2.left, y: t2.top }, bottomRight: { x: t2.left + t2.width, y: t2.top + t2.height } };
        }
        var o = { distanceToPoint: function(t2, e2) {
          var n2 = 655535;
          return function(t3) {
            return [{ start: { x: t3.left, y: t3.top }, end: { x: t3.left + t3.width, y: t3.top } }, { start: { x: t3.left + t3.width, y: t3.top }, end: { x: t3.left + t3.width, y: t3.top + t3.height } }, { start: { x: t3.left + t3.width, y: t3.top + t3.height }, end: { x: t3.left, y: t3.top + t3.height } }, { start: { x: t3.left, y: t3.top + t3.height }, end: { x: t3.left, y: t3.top } }];
          }(t2).forEach(function(t3) {
            var r2 = i.default.distanceToPoint(t3, e2);
            r2 < n2 && (n2 = r2);
          }), n2;
        }, getIntersectionRect: function(t2, e2) {
          var n2 = { topLeft: {}, bottomRight: {} };
          if (function(t3, e3) {
            var n3 = void 0, i3 = void 0, o3 = r(t3), s = r(e3);
            return n3 = t3.width >= 0 ? e3.width >= 0 ? !(o3.bottomRight.x <= s.topLeft.x || s.bottomRight.x <= o3.topLeft.x) : !(o3.bottomRight.x <= s.bottomRight.x || s.topLeft.x <= o3.topLeft.x) : e3.width >= 0 ? !(o3.topLeft.x <= s.topLeft.x || s.bottomRight.x <= o3.bottomRight.x) : !(o3.topLeft.x <= s.bottomRight.x || s.topLeft.x <= o3.bottomRight.x), i3 = t3.height >= 0 ? e3.height >= 0 ? !(o3.bottomRight.y <= s.topLeft.y || s.bottomRight.y <= o3.topLeft.y) : !(o3.bottomRight.y <= s.bottomRight.y || s.topLeft.y <= o3.topLeft.y) : e3.height >= 0 ? !(o3.topLeft.y <= s.topLeft.y || s.bottomRight.y <= o3.bottomRight.y) : !(o3.topLeft.y <= s.bottomRight.y || s.top <= o3.bottomRight.y), n3 && i3;
          }(t2, e2)) {
            var i2 = r(t2), o2 = r(e2);
            return t2.width >= 0 ? e2.width >= 0 ? (n2.topLeft.x = Math.max(i2.topLeft.x, o2.topLeft.x), n2.bottomRight.x = Math.min(i2.bottomRight.x, o2.bottomRight.x)) : (n2.topLeft.x = Math.max(i2.topLeft.x, o2.bottomRight.x), n2.bottomRight.x = Math.min(i2.bottomRight.x, o2.topLeft.x)) : e2.width >= 0 ? (n2.topLeft.x = Math.min(i2.topLeft.x, o2.bottomRight.x), n2.bottomRight.x = Math.max(i2.bottomRight.x, o2.topLeft.x)) : (n2.topLeft.x = Math.min(i2.topLeft.x, o2.topLeft.x), n2.bottomRight.x = Math.max(i2.bottomRight.x, o2.bottomRight.x)), t2.height >= 0 ? e2.height >= 0 ? (n2.topLeft.y = Math.max(i2.topLeft.y, o2.topLeft.y), n2.bottomRight.y = Math.min(i2.bottomRight.y, o2.bottomRight.y)) : (n2.topLeft.y = Math.max(i2.topLeft.y, o2.bottomRight.y), n2.bottomRight.y = Math.min(i2.bottomRight.y, o2.topLeft.y)) : e2.height >= 0 ? (n2.topLeft.y = Math.min(i2.topLeft.y, o2.bottomRight.y), n2.bottomRight.y = Math.max(i2.bottomRight.y, o2.topLeft.y)) : (n2.topLeft.y = Math.min(i2.topLeft.y, o2.topLeft.y), n2.bottomRight.y = Math.max(i2.bottomRight.y, o2.bottomRight.y)), n2;
          }
        } };
        e.default = o;
      }]);
    });
  }
});
export default require_cornerstoneMath_min();
/*! Bundled license information:

cornerstone-math/dist/cornerstoneMath.min.js:
  (*! cornerstone-math - 0.1.10 - 2022-06-09 | (c) 2017 Chris Hafey | https://github.com/cornerstonejs/cornerstoneMath *)
*/
//# sourceMappingURL=cornerstone-math.js.map
