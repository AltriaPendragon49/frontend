{
  "version": 3,
  "sources": ["webpack://cornerstoneMath/webpack/universalModuleDefinition", "webpack://cornerstoneMath/webpack/bootstrap", "webpack://cornerstoneMath/vector3.js", "webpack://cornerstoneMath/math.js", "webpack://cornerstoneMath/quaternion.js", "webpack://cornerstoneMath/lineSegment.js", "webpack://cornerstoneMath/index.js", "webpack://cornerstoneMath/Line3.js", "webpack://cornerstoneMath/matrix4.js", "webpack://cornerstoneMath/plane.js", "webpack://cornerstoneMath/point.js", "webpack://cornerstoneMath/rect.js"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cornerstone-math\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cornerstone-math\"] = factory();\n\telse\n\t\troot[\"cornerstoneMath\"] = factory();\n})(window, function() {\nreturn ", " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n", "import Quaternion from './quaternion.js';\r\nimport { clamp } from './math.js';\r\n\r\n// Based on THREE.JS\r\nclass Vector3 {\r\n\r\n  constructor (x, y, z) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n    this.z = z || 0;\r\n  }\r\n\r\n  set (x, y, z) {\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  setX (x) {\r\n\r\n    this.x = x;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  setY (y) {\r\n\r\n    this.y = y;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  setZ (z) {\r\n\r\n    this.z = z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  setComponent (index, value) {\r\n\r\n    switch (index) {\r\n\r\n    case 0: this.x = value; break;\r\n    case 1: this.y = value; break;\r\n    case 2: this.z = value; break;\r\n    default: throw new Error(`index is out of range: ${index}`);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  getComponent (index) {\r\n\r\n    switch (index) {\r\n\r\n    case 0: return this.x;\r\n    case 1: return this.y;\r\n    case 2: return this.z;\r\n    default: throw new Error(`index is out of range: ${index}`);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  copy (v) {\r\n\r\n    this.x = v.x;\r\n    this.y = v.y;\r\n    this.z = v.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  add (v, w) {\r\n\r\n    if (w !== undefined) {\r\n\r\n      console.warn('DEPRECATED: Vector3\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\r\n\r\n      return this.addVectors(v, w);\r\n\r\n    }\r\n\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n    this.z += v.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  addScalar (s) {\r\n\r\n    this.x += s;\r\n    this.y += s;\r\n    this.z += s;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  addVectors (a, b) {\r\n\r\n    this.x = a.x + b.x;\r\n    this.y = a.y + b.y;\r\n    this.z = a.z + b.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  sub (v, w) {\r\n\r\n    if (w !== undefined) {\r\n\r\n      console.warn('DEPRECATED: Vector3\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\r\n\r\n      return this.subVectors(v, w);\r\n\r\n    }\r\n\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n    this.z -= v.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  subVectors (a, b) {\r\n\r\n    this.x = a.x - b.x;\r\n    this.y = a.y - b.y;\r\n    this.z = a.z - b.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  multiply (v, w) {\r\n\r\n    if (w !== undefined) {\r\n\r\n      console.warn('DEPRECATED: Vector3\\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\r\n\r\n      return this.multiplyVectors(v, w);\r\n\r\n    }\r\n\r\n    this.x *= v.x;\r\n    this.y *= v.y;\r\n    this.z *= v.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  multiplyScalar (scalar) {\r\n\r\n    this.x *= scalar;\r\n    this.y *= scalar;\r\n    this.z *= scalar;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  multiplyVectors (a, b) {\r\n\r\n    this.x = a.x * b.x;\r\n    this.y = a.y * b.y;\r\n    this.z = a.z * b.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  applyMatrix3 (m) {\r\n\r\n    const x = this.x;\r\n    const y = this.y;\r\n    const z = this.z;\r\n\r\n    const e = m.elements;\r\n\r\n    this.x = e[0] * x + e[3] * y + e[6] * z;\r\n    this.y = e[1] * x + e[4] * y + e[7] * z;\r\n    this.z = e[2] * x + e[5] * y + e[8] * z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  applyMatrix4 (m) {\r\n\r\n    // Input: THREE.Matrix4 affine matrix\r\n\r\n    let x = this.x,\r\n      y = this.y,\r\n      z = this.z;\r\n\r\n    const e = m.elements;\r\n\r\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12];\r\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13];\r\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14];\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  applyProjection (m) {\r\n\r\n    // Input: THREE.Matrix4 projection matrix\r\n\r\n    let x = this.x,\r\n      y = this.y,\r\n      z = this.z;\r\n\r\n    const e = m.elements;\r\n    const d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]); // Perspective divide\r\n\r\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;\r\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;\r\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  applyQuaternion (q) {\r\n\r\n    const x = this.x;\r\n    const y = this.y;\r\n    const z = this.z;\r\n\r\n    const qx = q.x;\r\n    const qy = q.y;\r\n    const qz = q.z;\r\n    const qw = q.w;\r\n\r\n    // Calculate quat * vector\r\n\r\n    const ix = qw * x + qy * z - qz * y;\r\n    const iy = qw * y + qz * x - qx * z;\r\n    const iz = qw * z + qx * y - qy * x;\r\n    const iw = -qx * x - qy * y - qz * z;\r\n\r\n    // Calculate result * inverse quat\r\n\r\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  transformDirection (m) {\r\n\r\n    // Input: THREE.Matrix4 affine matrix\r\n    // Vector interpreted as a direction\r\n\r\n    let x = this.x,\r\n      y = this.y,\r\n      z = this.z;\r\n\r\n    const e = m.elements;\r\n\r\n    this.x = e[0] * x + e[4] * y + e[8] * z;\r\n    this.y = e[1] * x + e[5] * y + e[9] * z;\r\n    this.z = e[2] * x + e[6] * y + e[10] * z;\r\n\r\n    this.normalize();\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  divide (v) {\r\n\r\n    this.x /= v.x;\r\n    this.y /= v.y;\r\n    this.z /= v.z;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  divideScalar (scalar) {\r\n\r\n    if (scalar !== 0) {\r\n\r\n      const invScalar = 1 / scalar;\r\n\r\n      this.x *= invScalar;\r\n      this.y *= invScalar;\r\n      this.z *= invScalar;\r\n\r\n    } else {\r\n\r\n      this.x = 0;\r\n      this.y = 0;\r\n      this.z = 0;\r\n\r\n    }\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  min (v) {\r\n\r\n    if (this.x > v.x) {\r\n\r\n      this.x = v.x;\r\n\r\n    }\r\n\r\n    if (this.y > v.y) {\r\n\r\n      this.y = v.y;\r\n\r\n    }\r\n\r\n    if (this.z > v.z) {\r\n\r\n      this.z = v.z;\r\n\r\n    }\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  max (v) {\r\n\r\n    if (this.x < v.x) {\r\n\r\n      this.x = v.x;\r\n\r\n    }\r\n\r\n    if (this.y < v.y) {\r\n\r\n      this.y = v.y;\r\n\r\n    }\r\n\r\n    if (this.z < v.z) {\r\n\r\n      this.z = v.z;\r\n\r\n    }\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  clamp (min, max) {\r\n\r\n    // This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n    if (this.x < min.x) {\r\n\r\n      this.x = min.x;\r\n\r\n    } else if (this.x > max.x) {\r\n\r\n      this.x = max.x;\r\n\r\n    }\r\n\r\n    if (this.y < min.y) {\r\n\r\n      this.y = min.y;\r\n\r\n    } else if (this.y > max.y) {\r\n\r\n      this.y = max.y;\r\n\r\n    }\r\n\r\n    if (this.z < min.z) {\r\n\r\n      this.z = min.z;\r\n\r\n    } else if (this.z > max.z) {\r\n\r\n      this.z = max.z;\r\n\r\n    }\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n\r\n  floor () {\r\n\r\n    this.x = Math.floor(this.x);\r\n    this.y = Math.floor(this.y);\r\n    this.z = Math.floor(this.z);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  ceil () {\r\n\r\n    this.x = Math.ceil(this.x);\r\n    this.y = Math.ceil(this.y);\r\n    this.z = Math.ceil(this.z);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  round () {\r\n\r\n    this.x = Math.round(this.x);\r\n    this.y = Math.round(this.y);\r\n    this.z = Math.round(this.z);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  roundToZero () {\r\n\r\n    this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n    this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n    this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  negate () {\r\n\r\n    return this.multiplyScalar(-1);\r\n\r\n  }\r\n\r\n  dot (v) {\r\n\r\n    return this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n  }\r\n\r\n  lengthSq () {\r\n\r\n    return this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n  }\r\n\r\n  length () {\r\n\r\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n\r\n  }\r\n\r\n  lengthManhattan () {\r\n\r\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n\r\n  }\r\n\r\n  normalize () {\r\n\r\n    return this.divideScalar(this.length());\r\n\r\n  }\r\n\r\n  setLength (l) {\r\n\r\n    const oldLength = this.length();\r\n\r\n    if (oldLength !== 0 && l !== oldLength) {\r\n\r\n      this.multiplyScalar(l / oldLength);\r\n    }\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  lerp (v, alpha) {\r\n\r\n    this.x += (v.x - this.x) * alpha;\r\n    this.y += (v.y - this.y) * alpha;\r\n    this.z += (v.z - this.z) * alpha;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  cross (v, w) {\r\n\r\n    if (w !== undefined) {\r\n\r\n      console.warn('DEPRECATED: Vector3\\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\r\n\r\n      return this.crossVectors(v, w);\r\n\r\n    }\r\n\r\n    let x = this.x,\r\n      y = this.y,\r\n      z = this.z;\r\n\r\n    this.x = y * v.z - z * v.y;\r\n    this.y = z * v.x - x * v.z;\r\n    this.z = x * v.y - y * v.x;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  crossVectors (a, b) {\r\n\r\n    let ax = a.x,\r\n      ay = a.y,\r\n      az = a.z;\r\n    let bx = b.x,\r\n      by = b.y,\r\n      bz = b.z;\r\n\r\n    this.x = ay * bz - az * by;\r\n    this.y = az * bx - ax * bz;\r\n    this.z = ax * by - ay * bx;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  angleTo (v) {\r\n\r\n    const theta = this.dot(v) / (this.length() * v.length());\r\n\r\n    // Clamp, to handle numerical problems\r\n\r\n    return Math.acos(clamp(theta, -1, 1));\r\n\r\n  }\r\n\r\n  distanceTo (v) {\r\n\r\n    return Math.sqrt(this.distanceToSquared(v));\r\n\r\n  }\r\n\r\n  distanceToSquared (v) {\r\n\r\n    const dx = this.x - v.x;\r\n    const dy = this.y - v.y;\r\n    const dz = this.z - v.z;\r\n\r\n    return dx * dx + dy * dy + dz * dz;\r\n\r\n  }\r\n\r\n  setFromMatrixPosition (m) {\r\n\r\n    this.x = m.elements[12];\r\n    this.y = m.elements[13];\r\n    this.z = m.elements[14];\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  setFromMatrixScale (m) {\r\n\r\n    const sx = this.set(m.elements[0], m.elements[1], m.elements[2]).length();\r\n    const sy = this.set(m.elements[4], m.elements[5], m.elements[6]).length();\r\n    const sz = this.set(m.elements[8], m.elements[9], m.elements[10]).length();\r\n\r\n    this.x = sx;\r\n    this.y = sy;\r\n    this.z = sz;\r\n\r\n    return this;\r\n  }\r\n\r\n  setFromMatrixColumn (index, matrix) {\r\n\r\n    const offset = index * 4;\r\n\r\n    const me = matrix.elements;\r\n\r\n    this.x = me[offset];\r\n    this.y = me[offset + 1];\r\n    this.z = me[offset + 2];\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  equals (v) {\r\n\r\n    return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));\r\n\r\n  }\r\n\r\n  fromArray (array) {\r\n\r\n    this.x = array[0];\r\n    this.y = array[1];\r\n    this.z = array[2];\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  toArray () {\r\n\r\n    return [this.x, this.y, this.z];\r\n\r\n  }\r\n\r\n  clone () {\r\n\r\n    return new Vector3(this.x, this.y, this.z);\r\n\r\n  }\r\n}\r\n\r\nVector3.prototype.projectOnVector = (function () {\r\n\r\n  let v1, dot;\r\n\r\n  return function (vector) {\r\n\r\n    if (v1 === undefined) {\r\n      v1 = new Vector3();\r\n    }\r\n\r\n    v1.copy(vector).normalize();\r\n\r\n    dot = this.dot(v1);\r\n\r\n    return this.copy(v1).multiplyScalar(dot);\r\n\r\n  };\r\n\r\n})();\r\n\r\nVector3.prototype.projectOnPlane = (function () {\r\n\r\n  let v1;\r\n\r\n  return function (planeNormal) {\r\n\r\n    if (v1 === undefined) {\r\n      v1 = new Vector3();\r\n    }\r\n\r\n    v1.copy(this).projectOnVector(planeNormal);\r\n\r\n    return this.sub(v1);\r\n\r\n  };\r\n\r\n})();\r\n\r\nVector3.prototype.reflect = (function () {\r\n\r\n  // Reflect incident vector off plane orthogonal to normal\r\n  // Normal is assumed to have unit length\r\n\r\n  let v1;\r\n\r\n  return function (normal) {\r\n\r\n    if (v1 === undefined) {\r\n      v1 = new Vector3();\r\n    }\r\n\r\n    return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\r\n\r\n  };\r\n\r\n})();\r\n\r\n\r\nVector3.prototype.clampScalar = (function () {\r\n\r\n  let min, max;\r\n\r\n  return function (minVal, maxVal) {\r\n\r\n    if (min === undefined) {\r\n\r\n      min = new Vector3();\r\n      max = new Vector3();\r\n\r\n    }\r\n\r\n    min.set(minVal, minVal, minVal);\r\n    max.set(maxVal, maxVal, maxVal);\r\n\r\n    return this.clamp(min, max);\r\n\r\n  };\r\n\r\n})();\r\n\r\nVector3.prototype.applyAxisAngle = (function () {\r\n\r\n  let quaternion;\r\n\r\n  return function (axis, angle) {\r\n\r\n    if (quaternion === undefined) {\r\n      quaternion = new Quaternion();\r\n    }\r\n\r\n    this.applyQuaternion(quaternion.setFromAxisAngle(axis.normalize(), angle));\r\n\r\n    return this;\r\n\r\n  };\r\n\r\n})();\r\n\r\nexport default Vector3;\r\n", "const EPSILON = 0.0001;\r\n// Based on THREE.JS\r\nfunction clamp (x, a, b) {\r\n  return (x < a) ? a : ((x > b) ? b : x);\r\n}\r\n\r\nfunction degToRad (degrees) {\r\n  const degreeToRadiansFactor = Math.PI / 180;\r\n\r\n\r\n  return degrees * degreeToRadiansFactor;\r\n}\r\n\r\nfunction radToDeg (radians) {\r\n  const radianToDegreesFactor = 180 / Math.PI;\r\n\r\n\r\n  return radians * radianToDegreesFactor;\r\n}\r\n\r\n// Returns sign of number\r\nfunction sign (x) {\r\n  return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? 0 : NaN : NaN;\r\n}\r\n\r\n\r\n/**\r\n * \r\n * Compare if two numbers are equal(if they have approximately the same value). to prevent js float precision issue\r\n * Adapted from glmatrix\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number} epsilon Precision to define proximity\r\n * @return {boolean} check whether or not the arguments have approximately the same value\r\n * \r\n */\r\nfunction approximatelyEquals (a, b, epsilon) {\r\n  const _epsilon = epsilon || EPSILON;\r\n  return Math.abs(a - b) <= _epsilon*Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}\r\n\r\nexport {\r\n  clamp,\r\n  degToRad,\r\n  approximatelyEquals,\r\n  radToDeg,\r\n  sign\r\n};\r\n", "class Quaternion {\r\n  constructor (x, y, z, w) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n    this.z = z || 0;\r\n    this.w = (w !== undefined) ? w : 1;\r\n  }\r\n\r\n  setFromAxisAngle (axis, angle) {\r\n    let halfAngle = angle / 2,\r\n      s = Math.sin(halfAngle);\r\n\r\n    this.x = axis.x * s;\r\n    this.y = axis.y * s;\r\n    this.z = axis.z * s;\r\n    this.w = Math.cos(halfAngle);\r\n\r\n    return this;\r\n  }\r\n\r\n  multiplyQuaternions (a, b) {\r\n    let qax = a.x,\r\n      qay = a.y,\r\n      qaz = a.z,\r\n      qaw = a.w;\r\n    let qbx = b.x,\r\n      qby = b.y,\r\n      qbz = b.z,\r\n      qbw = b.w;\r\n\r\n    this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n    this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n    this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n    this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n    return this;\r\n  }\r\n\r\n  setFromRotationMatrix (m) {\r\n    let te = m.elements,\r\n\r\n      m11 = te[0],\r\n      m12 = te[4],\r\n      m13 = te[8],\r\n      m21 = te[1],\r\n      m22 = te[5],\r\n      m23 = te[9],\r\n      m31 = te[2],\r\n      m32 = te[6],\r\n      m33 = te[10],\r\n\r\n      trace = m11 + m22 + m33,\r\n      s;\r\n\r\n    if (trace > 0) {\r\n\r\n      s = 0.5 / Math.sqrt(trace + 1.0);\r\n\r\n      this.w = 0.25 / s;\r\n      this.x = (m32 - m23) * s;\r\n      this.y = (m13 - m31) * s;\r\n      this.z = (m21 - m12) * s;\r\n\r\n    } else if (m11 > m22 && m11 > m33) {\r\n\r\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n\r\n      this.w = (m32 - m23) / s;\r\n      this.x = 0.25 * s;\r\n      this.y = (m12 + m21) / s;\r\n      this.z = (m13 + m31) / s;\r\n\r\n    } else if (m22 > m33) {\r\n\r\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n\r\n      this.w = (m13 - m31) / s;\r\n      this.x = (m12 + m21) / s;\r\n      this.y = 0.25 * s;\r\n      this.z = (m23 + m32) / s;\r\n\r\n    } else {\r\n\r\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n\r\n      this.w = (m21 - m12) / s;\r\n      this.x = (m13 + m31) / s;\r\n      this.y = (m23 + m32) / s;\r\n      this.z = 0.25 * s;\r\n\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Quaternion;\r\n", "import { sign } from './math.js';\r\n\r\n// Based on  http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\r\nfunction sqr (x) {\r\n  return x * x;\r\n}\r\n\r\nfunction dist2 (v, w) {\r\n  return sqr(v.x - w.x) + sqr(v.y - w.y);\r\n}\r\n\r\nfunction distanceToPointSquared (lineSegment, point) {\r\n  const l2 = dist2(lineSegment.start, lineSegment.end);\r\n\r\n  if(l2 === 0) {\r\n    return dist2(point, lineSegment.start);\r\n  }\r\n  const t = ((point.x - lineSegment.start.x) * (lineSegment.end.x - lineSegment.start.x) +\r\n        (point.y - lineSegment.start.y) * (lineSegment.end.y - lineSegment.start.y)) / l2;\r\n\r\n  if(t < 0) {\r\n    return dist2(point, lineSegment.start);\r\n  }\r\n  if(t > 1) {\r\n    return dist2(point, lineSegment.end);\r\n  }\r\n\r\n  const pt = {\r\n    x: lineSegment.start.x + t * (lineSegment.end.x - lineSegment.start.x),\r\n    y: lineSegment.start.y + t * (lineSegment.end.y - lineSegment.start.y)\r\n  };\r\n\r\n\r\n  return dist2(point, pt);\r\n}\r\n\r\nfunction distanceToPoint (lineSegment, point) {\r\n  return Math.sqrt(distanceToPointSquared(lineSegment, point));\r\n}\r\n\r\n// Returns intersection points of two lines\r\nfunction intersectLine (lineSegment1, lineSegment2) {\r\n  const intersectionPoint = {};\r\n\r\n  let x1 = lineSegment1.start.x,\r\n    y1 = lineSegment1.start.y,\r\n    x2 = lineSegment1.end.x,\r\n    y2 = lineSegment1.end.y,\r\n    x3 = lineSegment2.start.x,\r\n    y3 = lineSegment2.start.y,\r\n    x4 = lineSegment2.end.x,\r\n    y4 = lineSegment2.end.y;\r\n\r\n  // Coefficients of line equations\r\n  let a1, a2, b1, b2, c1, c2;\r\n  // Sign values\r\n  let r1, r2, r3, r4;\r\n\r\n  // Intermediate values\r\n  let denom, num;\r\n\r\n  // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\r\n  a1 = y2 - y1;\r\n  b1 = x1 - x2;\r\n  c1 = x2 * y1 - x1 * y2;\r\n\r\n  // Compute r3 and r4\r\n  r3 = a1 * x3 + b1 * y3 + c1;\r\n  r4 = a1 * x4 + b1 * y4 + c1;\r\n\r\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\r\n    * same side of line 1, the line segments do not intersect.\r\n    */\r\n\r\n  if (r3 !== 0 &&\r\n        r4 !== 0 &&\r\n        sign(r3) === sign(r4)) {\r\n    return;\r\n  }\r\n\r\n  // Compute a2, b2, c2\r\n  a2 = y4 - y3;\r\n  b2 = x3 - x4;\r\n  c2 = x4 * y3 - x3 * y4;\r\n\r\n  // Compute r1 and r2\r\n  r1 = a2 * x1 + b2 * y1 + c2;\r\n  r2 = a2 * x2 + b2 * y2 + c2;\r\n\r\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\r\n    * on same side of second line segment, the line segments do\r\n    * not intersect.\r\n    */\r\n\r\n  if (r1 !== 0 &&\r\n        r2 !== 0 &&\r\n        sign(r1) === sign(r2)) {\r\n    return;\r\n  }\r\n\r\n  /* Line segments intersect: compute intersection point.\r\n    */\r\n\r\n  denom = (a1 * b2) - (a2 * b1);\r\n\r\n  /* The denom/2 is to get rounding instead of truncating.  It\r\n    * is added or subtracted to the numerator, depending upon the\r\n    * sign of the numerator.\r\n    */\r\n\r\n  num = (b1 * c2) - (b2 * c1);\r\n  const x = parseFloat(num / denom);\r\n\r\n  num = (a2 * c1) - (a1 * c2);\r\n  const y = parseFloat(num / denom);\r\n\r\n  intersectionPoint.x = x;\r\n  intersectionPoint.y = y;\r\n\r\n  return intersectionPoint;\r\n}\r\n\r\n// Module exports\r\nconst lineSegment = {\r\n  distanceToPoint,\r\n  intersectLine\r\n};\r\n\r\nexport default lineSegment;\r\n", "import { default as Line3 } from './Line3.js';\r\nimport { default as lineSegment } from './lineSegment.js';\r\nimport { clamp,\r\n  degToRad,\r\n  radToDeg,\r\n  sign } from './math.js';\r\n\r\nimport { default as Matrix4 } from './matrix4.js';\r\nimport { default as Plane } from './plane.js';\r\nimport { default as point } from './point.js';\r\nimport { default as quaternion } from './quaternion.js';\r\nimport { default as rect } from './rect.js';\r\nimport { default as Vector3 } from './vector3.js';\r\n\r\nconst cornerstoneMath = {\r\n  Line3,\r\n  lineSegment,\r\n  clamp,\r\n  degToRad,\r\n  radToDeg,\r\n  sign,\r\n  Matrix4,\r\n  Plane,\r\n  point,\r\n  quaternion,\r\n  rect,\r\n  Vector3\r\n};\r\n\r\nexport {\r\n  Line3,\r\n  lineSegment,\r\n  clamp,\r\n  degToRad,\r\n  radToDeg,\r\n  sign,\r\n  Matrix4,\r\n  Plane,\r\n  point,\r\n  quaternion,\r\n  rect,\r\n  Vector3\r\n};\r\n\r\nexport default cornerstoneMath;\r\n", "import Vector3 from './vector3.js';\r\nimport { clamp, approximatelyEquals } from './math.js';\r\n\r\n// Copied from THREE.JS\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\n\r\nclass Line3 {\r\n  constructor (start, end) {\r\n\r\n    this.start = (start !== undefined) ? start : new Vector3();\r\n    this.end = (end !== undefined) ? end : new Vector3();\r\n\r\n  }\r\n\r\n  set (start, end) {\r\n\r\n    this.start.copy(start);\r\n    this.end.copy(end);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  copy (line) {\r\n\r\n    this.start.copy(line.start);\r\n    this.end.copy(line.end);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  center (optionalTarget) {\r\n\r\n    const result = optionalTarget || new Vector3();\r\n\r\n\r\n    return result.addVectors(this.start, this.end).multiplyScalar(0.5);\r\n\r\n  }\r\n\r\n  delta (optionalTarget) {\r\n\r\n    const result = optionalTarget || new Vector3();\r\n\r\n\r\n    return result.subVectors(this.end, this.start);\r\n\r\n  }\r\n\r\n  distanceSq () {\r\n\r\n    return this.start.distanceToSquared(this.end);\r\n\r\n  }\r\n\r\n  distance () {\r\n\r\n    return this.start.distanceTo(this.end);\r\n\r\n  }\r\n\r\n  at (t, optionalTarget) {\r\n\r\n    const result = optionalTarget || new Vector3();\r\n\r\n    return this.delta(result).multiplyScalar(t).add(this.start);\r\n\r\n  }\r\n\r\n  closestPointToPointParameter (point, clampToLine) {\r\n\r\n    const startP = new Vector3();\r\n    const startEnd = new Vector3();\r\n\r\n    startP.subVectors(point, this.start);\r\n    startEnd.subVectors(this.end, this.start);\r\n\r\n    const startEnd2 = startEnd.dot(startEnd);\r\n    const startEnd_startP = startEnd.dot(startP);\r\n\r\n    let t = startEnd_startP / startEnd2;\r\n\r\n    if (clampToLine) {\r\n      t = clamp(t, 0, 1);\r\n    }\r\n\r\n    return t;\r\n\r\n  }\r\n\r\n  closestPointToPoint (point, clampToLine, optionalTarget) {\r\n\r\n    const t = this.closestPointToPointParameter(point, clampToLine);\r\n\r\n    const result = optionalTarget || new Vector3();\r\n\r\n    return this.delta(result).multiplyScalar(t).add(this.start);\r\n\r\n  }\r\n\r\n  applyMatrix4 (matrix) {\r\n\r\n    this.start.applyMatrix4(matrix);\r\n    this.end.applyMatrix4(matrix);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  equals (line) {\r\n\r\n    return line.start.equals(this.start) && line.end.equals(this.end);\r\n\r\n  }\r\n\r\n  clone () {\r\n\r\n    return new Line3().copy(this);\r\n\r\n  }\r\n\r\n  intersectLine (line) {\r\n    // http://stackoverflow.com/questions/2316490/the-algorithm-to-find-the-point-of-intersection-of-two-3d-line-segment/10288710#10288710\r\n    // Consider two lines r1 and r2, represented by the following parametric equations:A + vt and B + us, respectively.\r\n    // Where A is a point of r1 and v a vector parallel to line.\r\n    // And B is a point of r2 and u a vector parallel to line.\r\n    // 'this' represents r2 and 'line' represents r1\r\n    const da = this.end.clone().sub(this.start); //u\r\n    const db = line.end.clone().sub(line.start); //v\r\n    const dc = line.start.clone().sub(this.start); // AB\r\n\r\n    const daCrossDb = da.clone().cross(db);\r\n    const dcCrossDb = dc.clone().cross(db);\r\n\r\n    // Lines are not coplanar, stop here\r\n    // Coplanar only if the vectors AB, u, v are linearly dependent, i.e AB . (u × v) = 0\r\n    const coplanarResult = dc.dot(daCrossDb);\r\n    const normalizedCoplanarResult =\r\n      coplanarResult / (dc.lengthSq() * daCrossDb.lengthSq());\r\n    if (!approximatelyEquals(normalizedCoplanarResult, 0)) {\r\n      return;\r\n    }\r\n\r\n    const s = dcCrossDb.dot(daCrossDb) / daCrossDb.lengthSq();\r\n\r\n    // Make sure we have an intersection\r\n    if (s > 1.0 || isNaN(s)) {\r\n      return;\r\n    }\r\n\r\n    const intersection = this.start.clone().add(da.clone().multiplyScalar(s));\r\n    const distanceTest = intersection.clone().sub(line.start).lengthSq() + intersection.clone().sub(line.end).lengthSq();\r\n\r\n    if (distanceTest <= line.distanceSq()) {\r\n      return intersection;\r\n    }\r\n\r\n    return;\r\n  }\r\n}\r\n\r\nexport default Line3;\r\n", "import Vector3 from './vector3.js';\r\n\r\n// Based on THREE.JS\r\nclass Matrix4 {\r\n\r\n  constructor (n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\r\n    this.elements = new Float32Array(16);\r\n\r\n    // TODO: if n11 is undefined, then just set to identity, otherwise copy all other values into matrix\r\n    // We should not support semi specification of Matrix4, it is just weird.\r\n\r\n    const te = this.elements;\r\n\r\n    te[0] = (n11 !== undefined) ? n11 : 1; te[4] = n12 || 0; te[8] = n13 || 0; te[12] = n14 || 0;\r\n    te[1] = n21 || 0; te[5] = (n22 !== undefined) ? n22 : 1; te[9] = n23 || 0; te[13] = n24 || 0;\r\n    te[2] = n31 || 0; te[6] = n32 || 0; te[10] = (n33 !== undefined) ? n33 : 1; te[14] = n34 || 0;\r\n    te[3] = n41 || 0; te[7] = n42 || 0; te[11] = n43 || 0; te[15] = (n44 !== undefined) ? n44 : 1;\r\n\r\n  }\r\n\r\n  makeRotationFromQuaternion (q) {\r\n    const te = this.elements;\r\n\r\n    let x = q.x,\r\n      y = q.y,\r\n      z = q.z,\r\n      w = q.w;\r\n    let x2 = x + x,\r\n      y2 = y + y,\r\n      z2 = z + z;\r\n    let xx = x * x2,\r\n      xy = x * y2,\r\n      xz = x * z2;\r\n    let yy = y * y2,\r\n      yz = y * z2,\r\n      zz = z * z2;\r\n    let wx = w * x2,\r\n      wy = w * y2,\r\n      wz = w * z2;\r\n\r\n    te[0] = 1 - (yy + zz);\r\n    te[4] = xy - wz;\r\n    te[8] = xz + wy;\r\n\r\n    te[1] = xy + wz;\r\n    te[5] = 1 - (xx + zz);\r\n    te[9] = yz - wx;\r\n\r\n    te[2] = xz - wy;\r\n    te[6] = yz + wx;\r\n    te[10] = 1 - (xx + yy);\r\n\r\n    // Last column\r\n    te[3] = 0;\r\n    te[7] = 0;\r\n    te[11] = 0;\r\n\r\n    // Bottom row\r\n    te[12] = 0;\r\n    te[13] = 0;\r\n    te[14] = 0;\r\n    te[15] = 1;\r\n\r\n    return this;\r\n  }\r\n\r\n  multiplyMatrices (a, b) {\r\n    const ae = a.elements;\r\n    const be = b.elements;\r\n    const te = this.elements;\r\n\r\n    let a11 = ae[0],\r\n      a12 = ae[4],\r\n      a13 = ae[8],\r\n      a14 = ae[12];\r\n    let a21 = ae[1],\r\n      a22 = ae[5],\r\n      a23 = ae[9],\r\n      a24 = ae[13];\r\n    let a31 = ae[2],\r\n      a32 = ae[6],\r\n      a33 = ae[10],\r\n      a34 = ae[14];\r\n    let a41 = ae[3],\r\n      a42 = ae[7],\r\n      a43 = ae[11],\r\n      a44 = ae[15];\r\n\r\n    let b11 = be[0],\r\n      b12 = be[4],\r\n      b13 = be[8],\r\n      b14 = be[12];\r\n    let b21 = be[1],\r\n      b22 = be[5],\r\n      b23 = be[9],\r\n      b24 = be[13];\r\n    let b31 = be[2],\r\n      b32 = be[6],\r\n      b33 = be[10],\r\n      b34 = be[14];\r\n    let b41 = be[3],\r\n      b42 = be[7],\r\n      b43 = be[11],\r\n      b44 = be[15];\r\n\r\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n    return this;\r\n  }\r\n\r\n  multiply (m, n) {\r\n\r\n    if (n !== undefined) {\r\n\r\n      console.warn('DEPRECATED: Matrix4\\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\r\n\r\n      return this.multiplyMatrices(m, n);\r\n    }\r\n\r\n    return this.multiplyMatrices(this, m);\r\n  }\r\n\r\n  getInverse (m, throwOnInvertible) {\r\n\r\n    // Based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n    const te = this.elements;\r\n    const me = m.elements;\r\n\r\n    let n11 = me[0],\r\n      n12 = me[4],\r\n      n13 = me[8],\r\n      n14 = me[12];\r\n    let n21 = me[1],\r\n      n22 = me[5],\r\n      n23 = me[9],\r\n      n24 = me[13];\r\n    let n31 = me[2],\r\n      n32 = me[6],\r\n      n33 = me[10],\r\n      n34 = me[14];\r\n    let n41 = me[3],\r\n      n42 = me[7],\r\n      n43 = me[11],\r\n      n44 = me[15];\r\n\r\n    te[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\r\n    te[4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\r\n    te[8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\r\n    te[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n    te[1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\r\n    te[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\r\n    te[9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\r\n    te[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\r\n    te[2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\r\n    te[6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\r\n    te[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\r\n    te[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\r\n    te[3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\r\n    te[7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\r\n    te[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\r\n    te[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\r\n\r\n    const det = n11 * te[0] + n21 * te[4] + n31 * te[8] + n41 * te[12];\r\n\r\n    if (det === 0) {\r\n\r\n      const msg = 'Matrix4.getInverse(): can\\'t invert matrix, determinant is 0';\r\n\r\n      if (throwOnInvertible || false) {\r\n\r\n        throw new Error(msg);\r\n\r\n      } else {\r\n\r\n        console.warn(msg);\r\n\r\n      }\r\n\r\n      this.identity();\r\n\r\n      return this;\r\n    }\r\n\r\n    this.multiplyScalar(1 / det);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  applyToVector3Array () {\r\n\r\n    const v1 = new Vector3();\r\n\r\n    return function (array, offset, length) {\r\n\r\n      if (offset === undefined) {\r\n        offset = 0;\r\n      }\r\n      if (length === undefined) {\r\n        length = array.length;\r\n      }\r\n\r\n      for (var i = 0, j = offset; i < length; i += 3, j += 3) {\r\n\r\n        v1.x = array[j];\r\n        v1.y = array[j + 1];\r\n        v1.z = array[j + 2];\r\n\r\n        v1.applyMatrix4(this);\r\n\r\n        array[j] = v1.x;\r\n        array[j + 1] = v1.y;\r\n        array[j + 2] = v1.z;\r\n\r\n      }\r\n\r\n      return array;\r\n\r\n    };\r\n\r\n  }\r\n\r\n  makeTranslation (x, y, z) {\r\n\r\n    this.set(\r\n      1, 0, 0, x,\r\n      0, 1, 0, y,\r\n      0, 0, 1, z,\r\n      0, 0, 0, 1\r\n    );\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  multiplyScalar (s) {\r\n\r\n    const te = this.elements;\r\n\r\n    te[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;\r\n    te[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;\r\n    te[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;\r\n    te[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  set (n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\r\n\r\n    const te = this.elements;\r\n\r\n    te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;\r\n    te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;\r\n    te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;\r\n    te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  makeScale (x, y, z) {\r\n\r\n    this.set(\r\n      x, 0, 0, 0,\r\n      0, y, 0, 0,\r\n      0, 0, z, 0,\r\n      0, 0, 0, 1\r\n    );\r\n\r\n    return this;\r\n\r\n  }\r\n}\r\n\r\nexport default Matrix4;\r\n", "import Vector3 from './vector3.js';\r\n\r\n// Copied from Three.JS\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nclass Plane {\r\n  constructor (normal, constant) {\r\n\r\n    this.normal = (normal !== undefined) ? normal : new Vector3(1, 0, 0);\r\n    this.constant = (constant !== undefined) ? constant : 0;\r\n\r\n  }\r\n\r\n  set (normal, constant) {\r\n\r\n    this.normal.copy(normal);\r\n    this.constant = constant;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  setComponents (x, y, z, w) {\r\n\r\n    this.normal.set(x, y, z);\r\n    this.constant = w;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  setFromNormalAndCoplanarPoint (normal, point) {\r\n\r\n    this.normal.copy(normal);\r\n    // Must be this.normal, not normal, as this.normal is normalized\r\n    this.constant = -point.dot(this.normal);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  copy (plane) {\r\n\r\n    this.normal.copy(plane.normal);\r\n    this.constant = plane.constant;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  normalize () {\r\n\r\n    // Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n    const inverseNormalLength = 1.0 / this.normal.length();\r\n\r\n    this.normal.multiplyScalar(inverseNormalLength);\r\n    this.constant *= inverseNormalLength;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  negate () {\r\n\r\n    this.constant *= -1;\r\n    this.normal.negate();\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  distanceToPoint (point) {\r\n\r\n    return this.normal.dot(point) + this.constant;\r\n\r\n  }\r\n\r\n  distanceToSphere (sphere) {\r\n\r\n    return this.distanceToPoint(sphere.center) - sphere.radius;\r\n\r\n  }\r\n\r\n  projectPoint (point, optionalTarget) {\r\n\r\n    return this.orthoPoint(point, optionalTarget).sub(point).negate();\r\n\r\n  }\r\n\r\n  orthoPoint (point, optionalTarget) {\r\n\r\n    const perpendicularMagnitude = this.distanceToPoint(point);\r\n\r\n    const result = optionalTarget || new Vector3();\r\n\r\n\r\n    return result.copy(this.normal).multiplyScalar(perpendicularMagnitude);\r\n\r\n  }\r\n\r\n  isIntersectionLine (line) {\r\n\r\n    // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n    const startSign = this.distanceToPoint(line.start);\r\n    const endSign = this.distanceToPoint(line.end);\r\n\r\n    return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);\r\n\r\n  }\r\n\r\n  intersectPlane (targetPlane) {\r\n    // Returns the intersection line between two planes\r\n    const direction = this.normal.clone().cross(targetPlane.normal);\r\n    const origin = new Vector3();\r\n    const intersectionData = {\r\n      origin,\r\n      direction\r\n    };\r\n\r\n    // If the planes are parallel, return an empty vector for the intersection line\r\n    if (this.normal.clone().cross(targetPlane.normal).length < 1e-10) {\r\n      intersectionData.direction = new Vector3();\r\n\r\n      return intersectionData;\r\n    }\r\n\r\n    const h1 = this.constant;\r\n    const h2 = targetPlane.constant;\r\n    const n1dotn2 = this.normal.clone().dot(targetPlane.normal);\r\n\r\n    const c1 = -(h1 - h2 * n1dotn2) / (1 - n1dotn2 * n1dotn2);\r\n    const c2 = -(h2 - h1 * n1dotn2) / (1 - n1dotn2 * n1dotn2);\r\n\r\n    intersectionData.origin = this.normal.clone().multiplyScalar(c1).add(targetPlane.normal.clone().multiplyScalar(c2));\r\n\r\n    return intersectionData;\r\n  }\r\n\r\n  coplanarPoint (optionalTarget) {\r\n\r\n    const result = optionalTarget || new Vector3();\r\n\r\n\r\n    return result.copy(this.normal).multiplyScalar(-this.constant);\r\n\r\n  }\r\n\r\n  translate (offset) {\r\n\r\n    this.constant = this.constant - offset.dot(this.normal);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  equals (plane) {\r\n\r\n    return plane.normal.equals(this.normal) && (plane.constant === this.constant);\r\n\r\n  }\r\n\r\n  clone () {\r\n\r\n    return new Plane().copy(this);\r\n\r\n  }\r\n}\r\n\r\nPlane.prototype.setFromCoplanarPoints = (function () {\r\n\r\n  const v1 = new Vector3();\r\n  const v2 = new Vector3();\r\n\r\n  return function (a, b, c) {\r\n\r\n    const normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize();\r\n\r\n    // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n    this.setFromNormalAndCoplanarPoint(normal, a);\r\n\r\n    return this;\r\n\r\n  };\r\n\r\n})();\r\n\r\nPlane.prototype.intersectLine = (function () {\r\n\r\n  const v1 = new Vector3();\r\n\r\n  return function (line, optionalTarget) {\r\n\r\n    const result = optionalTarget || new Vector3();\r\n\r\n    const direction = line.delta(v1);\r\n\r\n    const denominator = this.normal.dot(direction);\r\n\r\n    if (denominator === 0) {\r\n\r\n      // Line is coplanar, return origin\r\n      if (this.distanceToPoint(line.start) === 0) {\r\n\r\n        return result.copy(line.start);\r\n\r\n      }\r\n\r\n      // Unsure if this is the correct method to handle this case.\r\n      return undefined;\r\n\r\n    }\r\n\r\n    const t = -(line.start.dot(this.normal) + this.constant) / denominator;\r\n\r\n    if (t < 0 || t > 1) {\r\n\r\n      return undefined;\r\n\r\n    }\r\n\r\n    return result.copy(direction).multiplyScalar(t).add(line.start);\r\n\r\n  };\r\n\r\n})();\r\n\r\nexport default Plane;\r\n", "function pageToPoint (e) {\r\n  return {\r\n    x: e.pageX,\r\n    y: e.pageY\r\n  };\r\n}\r\n\r\nfunction subtract (lhs, rhs) {\r\n  return {\r\n    x: lhs.x - rhs.x,\r\n    y: lhs.y - rhs.y\r\n  };\r\n}\r\n\r\nfunction copy (point) {\r\n  return {\r\n    x: point.x,\r\n    y: point.y\r\n  };\r\n}\r\n\r\nfunction distance (from, to) {\r\n  return Math.sqrt(distanceSquared(from, to));\r\n}\r\n\r\nfunction distanceSquared (from, to) {\r\n  const delta = subtract(from, to);\r\n\r\n\r\n  return delta.x * delta.x + delta.y * delta.y;\r\n}\r\n\r\nfunction insideRect (point, rect) {\r\n  if(point.x < rect.left ||\r\n        point.x > rect.left + rect.width ||\r\n        point.y < rect.top ||\r\n        point.y > rect.top + rect.height) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Returns the closest source point to a target point\r\n * given an array of source points.\r\n *\r\n * @param sources An Array of source Points\r\n * @param target The target Point\r\n * @returns Point The closest point from the points array\r\n */\r\nfunction findClosestPoint (sources, target) {\r\n  const distances = [];\r\n  let minDistance;\r\n\r\n  sources.forEach(function (source, index) {\r\n    const d = distance(source, target);\r\n\r\n    distances.push(d);\r\n\r\n    if (index === 0) {\r\n      minDistance = d;\r\n    } else {\r\n      minDistance = Math.min(d, minDistance);\r\n    }\r\n  });\r\n\r\n  const index = distances.indexOf(minDistance);\r\n\r\n\r\n  return sources[index];\r\n}\r\n\r\nconst point = {\r\n  subtract,\r\n  copy,\r\n  pageToPoint,\r\n  distance,\r\n  distanceSquared,\r\n  insideRect,\r\n  findClosestPoint\r\n};\r\n\r\nexport default point;\r\n", "import lineSegment from './lineSegment.js';\r\n\r\nfunction rectToLineSegments (rect) {\r\n  const top = {\r\n    start: {\r\n      x: rect.left,\r\n      y: rect.top\r\n    },\r\n    end: {\r\n      x: rect.left + rect.width,\r\n      y: rect.top\r\n\r\n    }\r\n  };\r\n  const right = {\r\n    start: {\r\n      x: rect.left + rect.width,\r\n      y: rect.top\r\n    },\r\n    end: {\r\n      x: rect.left + rect.width,\r\n      y: rect.top + rect.height\r\n\r\n    }\r\n  };\r\n  const bottom = {\r\n    start: {\r\n      x: rect.left + rect.width,\r\n      y: rect.top + rect.height\r\n    },\r\n    end: {\r\n      x: rect.left,\r\n      y: rect.top + rect.height\r\n\r\n    }\r\n  };\r\n  const left = {\r\n    start: {\r\n      x: rect.left,\r\n      y: rect.top + rect.height\r\n    },\r\n    end: {\r\n      x: rect.left,\r\n      y: rect.top\r\n\r\n    }\r\n  };\r\n  const lineSegments = [top, right, bottom, left];\r\n\r\n\r\n  return lineSegments;\r\n}\r\n\r\nfunction distanceToPoint (rect, point) {\r\n  let minDistance = 655535;\r\n  const lineSegments = rectToLineSegments(rect);\r\n\r\n  lineSegments.forEach(function (segment) {\r\n    const distance = lineSegment.distanceToPoint(segment, point);\r\n\r\n    if(distance < minDistance) {\r\n      minDistance = distance;\r\n    }\r\n  });\r\n\r\n  return minDistance;\r\n}\r\n\r\n// Returns top-left and bottom-right points of the rectangle\r\nfunction rectToPoints (rect) {\r\n  const rectPoints = {\r\n    topLeft: {\r\n      x: rect.left,\r\n      y: rect.top\r\n    },\r\n    bottomRight: {\r\n      x: rect.left + rect.width,\r\n      y: rect.top + rect.height\r\n    }\r\n  };\r\n\r\n  return rectPoints;\r\n}\r\n\r\n// Returns whether two non-rotated rectangles are intersected\r\nfunction doesIntersect (rect1, rect2) {\r\n  let intersectLeftRight;\r\n  let intersectTopBottom;\r\n\r\n  const rect1Points = rectToPoints(rect1);\r\n  const rect2Points = rectToPoints(rect2);\r\n\r\n  if (rect1.width >= 0) {\r\n    if (rect2.width >= 0) {\r\n      intersectLeftRight = !((rect1Points.bottomRight.x <= rect2Points.topLeft.x) || (rect2Points.bottomRight.x <= rect1Points.topLeft.x));\r\n    } else {\r\n      intersectLeftRight = !((rect1Points.bottomRight.x <= rect2Points.bottomRight.x) || (rect2Points.topLeft.x <= rect1Points.topLeft.x));\r\n    }\r\n  } else if (rect2.width >= 0) {\r\n    intersectLeftRight = !((rect1Points.topLeft.x <= rect2Points.topLeft.x) || (rect2Points.bottomRight.x <= rect1Points.bottomRight.x));\r\n  } else {\r\n    intersectLeftRight = !((rect1Points.topLeft.x <= rect2Points.bottomRight.x) || (rect2Points.topLeft.x <= rect1Points.bottomRight.x));\r\n  }\r\n\r\n  if (rect1.height >= 0) {\r\n    if (rect2.height >= 0) {\r\n      intersectTopBottom = !((rect1Points.bottomRight.y <= rect2Points.topLeft.y) || (rect2Points.bottomRight.y <= rect1Points.topLeft.y));\r\n    } else {\r\n      intersectTopBottom = !((rect1Points.bottomRight.y <= rect2Points.bottomRight.y) || (rect2Points.topLeft.y <= rect1Points.topLeft.y));\r\n    }\r\n  } else if (rect2.height >= 0) {\r\n    intersectTopBottom = !((rect1Points.topLeft.y <= rect2Points.topLeft.y) || (rect2Points.bottomRight.y <= rect1Points.bottomRight.y));\r\n  } else {\r\n    intersectTopBottom = !((rect1Points.topLeft.y <= rect2Points.bottomRight.y) || (rect2Points.top <= rect1Points.bottomRight.y));\r\n  }\r\n\r\n  return intersectLeftRight && intersectTopBottom;\r\n}\r\n\r\n// Returns intersection points of two non-rotated rectangles\r\nfunction getIntersectionRect (rect1, rect2) {\r\n  const intersectRect = {\r\n    topLeft: {},\r\n    bottomRight: {}\r\n  };\r\n\r\n  if (!doesIntersect(rect1, rect2)) {\r\n    return;\r\n  }\r\n\r\n  const rect1Points = rectToPoints(rect1);\r\n  const rect2Points = rectToPoints(rect2);\r\n\r\n  if (rect1.width >= 0) {\r\n    if (rect2.width >= 0) {\r\n      intersectRect.topLeft.x = Math.max(rect1Points.topLeft.x, rect2Points.topLeft.x);\r\n      intersectRect.bottomRight.x = Math.min(rect1Points.bottomRight.x, rect2Points.bottomRight.x);\r\n    } else {\r\n      intersectRect.topLeft.x = Math.max(rect1Points.topLeft.x, rect2Points.bottomRight.x);\r\n      intersectRect.bottomRight.x = Math.min(rect1Points.bottomRight.x, rect2Points.topLeft.x);\r\n    }\r\n  } else if (rect2.width >= 0) {\r\n    intersectRect.topLeft.x = Math.min(rect1Points.topLeft.x, rect2Points.bottomRight.x);\r\n    intersectRect.bottomRight.x = Math.max(rect1Points.bottomRight.x, rect2Points.topLeft.x);\r\n  } else {\r\n    intersectRect.topLeft.x = Math.min(rect1Points.topLeft.x, rect2Points.topLeft.x);\r\n    intersectRect.bottomRight.x = Math.max(rect1Points.bottomRight.x, rect2Points.bottomRight.x);\r\n  }\r\n\r\n  if (rect1.height >= 0) {\r\n    if (rect2.height >= 0) {\r\n      intersectRect.topLeft.y = Math.max(rect1Points.topLeft.y, rect2Points.topLeft.y);\r\n      intersectRect.bottomRight.y = Math.min(rect1Points.bottomRight.y, rect2Points.bottomRight.y);\r\n    } else {\r\n      intersectRect.topLeft.y = Math.max(rect1Points.topLeft.y, rect2Points.bottomRight.y);\r\n      intersectRect.bottomRight.y = Math.min(rect1Points.bottomRight.y, rect2Points.topLeft.y);\r\n    }\r\n  } else if (rect2.height >= 0) {\r\n    intersectRect.topLeft.y = Math.min(rect1Points.topLeft.y, rect2Points.bottomRight.y);\r\n    intersectRect.bottomRight.y = Math.max(rect1Points.bottomRight.y, rect2Points.topLeft.y);\r\n  } else {\r\n    intersectRect.topLeft.y = Math.min(rect1Points.topLeft.y, rect2Points.topLeft.y);\r\n    intersectRect.bottomRight.y = Math.max(rect1Points.bottomRight.y, rect2Points.bottomRight.y);\r\n  }\r\n\r\n  // Returns top-left and bottom-right points of intersected rectangle\r\n  return intersectRect;\r\n\r\n}\r\n\r\nconst rect = {\r\n  distanceToPoint,\r\n  getIntersectionRect\r\n};\r\n\r\nexport default rect;\r\n"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "window", "installedModules", "__webpack_require__", "moduleId", "i", "l", "modules", "call", "m", "c", "d", "name", "getter", "o", "Object", "defineProperty", "enumerable", "get", "r", "Symbol", "toStringTag", "value", "t", "mode", "__esModule", "ns", "create", "key", "bind", "n", "object", "property", "prototype", "hasOwnProperty", "p", "s", "e", "_math", "Vector3", "x", "y", "z", "this", "index", "Error", "v", "w", "console", "warn", "addVectors", "a", "b", "subVectors", "multiplyVectors", "scalar", "elements", "q", "qx", "qy", "qz", "qw", "ix", "iy", "iz", "iw", "normalize", "invScalar", "min", "max", "Math", "floor", "ceil", "round", "multiplyScalar", "sqrt", "abs", "divideScalar", "length", "oldLength", "alpha", "crossVectors", "ax", "ay", "az", "bx", "by", "bz", "theta", "dot", "acos", "clamp", "distanceToSquared", "dx", "dy", "dz", "sx", "set", "sy", "sz", "matrix", "offset", "me", "array", "projectOnVector", "v1", "vector", "copy", "projectOnPlane", "planeNormal", "sub", "reflect", "normal", "clampScalar", "minVal", "maxVal", "applyAxisAngle", "quaternion", "axis", "angle", "Quaternion", "applyQuaternion", "setFromAxisAngle", "EPSILON", "degToRad", "degrees", "PI", "approximatelyEquals", "epsilon", "_epsilon", "radToDeg", "radians", "sign", "NaN", "halfAngle", "sin", "cos", "qax", "qay", "qaz", "qaw", "qbx", "qby", "qbz", "qbw", "te", "m11", "m12", "m13", "m21", "m22", "m23", "m31", "m32", "m33", "trace", "sqr", "dist2", "lineSegment", "distanceToPoint", "point", "l2", "start", "end", "intersectLine", "lineSegment1", "lineSegment2", "a1", "a2", "b1", "b2", "c1", "c2", "r1", "r2", "r3", "r4", "denom", "intersectionPoint", "x1", "y1", "x2", "y2", "x3", "y3", "x4", "y4", "num", "parseFloat", "cornerstoneMath", "Line3", "Matrix4", "Plane", "rect", "line", "optionalTarget", "distanceTo", "result", "delta", "add", "clampToLine", "startP", "startEnd", "startEnd2", "closestPointToPointParameter", "applyMatrix4", "equals", "da", "clone", "db", "dc", "daCrossDb", "cross", "dcCrossDb", "normalizedCoplanarResult", "lengthSq", "isNaN", "intersection", "distanceSq", "n11", "n12", "n13", "n14", "n21", "n22", "n23", "n24", "n31", "n32", "n33", "n34", "n41", "n42", "n43", "n44", "Float32Array", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "ae", "be", "a11", "a12", "a13", "a14", "a21", "a22", "a23", "a24", "a31", "a32", "a33", "a34", "a41", "a42", "a43", "a44", "b11", "b12", "b13", "b14", "b21", "b22", "b23", "b24", "b31", "b32", "b33", "b34", "b41", "b42", "b43", "b44", "multiplyMatrices", "throwOnInvertible", "det", "msg", "identity", "j", "constant", "plane", "inverseNormalLength", "negate", "sphere", "center", "radius", "orthoPoint", "perpendicularMagnitude", "startSign", "endSign", "targetPlane", "direction", "intersectionData", "origin", "h1", "h2", "n1dotn2", "setFromCoplanarPoints", "v2", "setFromNormalAndCoplanarPoint", "denominator", "subtract", "lhs", "rhs", "distance", "from", "to", "distanceSquared", "pageToPoint", "pageX", "pageY", "insideRect", "left", "width", "top", "height", "findClosestPoint", "sources", "target", "distances", "minDistance", "forEach", "source", "push", "indexOf", "rectToPoints", "topLeft", "bottomRight", "segment", "getIntersectionRect", "rect1", "rect2", "intersectRect", "intersectLeftRight", "intersectTopBottom", "rect1Points", "rect2Points"]
}
